# Ruff configuration for a Django project, following Python and Django best practices
# Compatible with Ruff version 0.5.0+ (June 2025)

line-length = 88
target-version = "py313"
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".ini",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "node_modules",
    "venv",
    "env/*",
    "**/migrations/*",  # Exclude all files in migrations directories
    "config/*",        # Exclude all files in config folder
    "**/alembic/**",
    "base.py",
    "local.py",
    "env.py",
    "production.py",
    "wsgi.py",
    "asgi.py",
    "manage.py",
    "__init__.py"
    # Add other specific files to ignore here, e.g.:
    # "manage.py",
]

[format]
# Enable Ruff's formatter with Django-compatible settings
quote-style = "single"  # Use single quotes, aligning with Django style
indent-style = "space"  # Use spaces for indentation (default, PEP 8)
line-ending = "lf"      # Use Unix-style line endings (LF), standard for Python projects

[lint]
extend-safe-fixes = [
    "E", "W", "F", "I", "D", "B", "C4", "UP", "RUF", "DJ"
]

extend-unsafe-fixes = ["F", "I"]

extend-select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort for import sorting
    "D",   # pydocstyle for docstrings
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
    "DJ",  # flake8-django
]
extend-ignore = [
    "B904",
    "D100",  # Missing module docstring
    "D101",
    "D102",
    "D103",
    "D104",  # Missing docstring in public package
    "D105",
    "D106",
    "D107",  # Missing docstring in __init__
    "D205",
    "DJ001",
    "DJ008",
    "RUF012",
    "E501",
    "Q000",
    "Q001"
]
# Ignore variables with underscores for undefined variable checks (F821)
dummy-variable-rgx = "^_+$|_.*"

[lint.isort]
# Define first-party apps in desired import order
known-third-party = ["fastapi", "sqlmodel", "pydantic", "starlette"]
known-first-party = ["app"]

section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]

forced-separate = [
  "fastapi",
  "app.db",
    "appp.db.",
    "app.schemas",
    "app.routers",
    "app.services",
    "app.utils"
]

combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2
split-on-trailing-comma = false
order-by-type = false
force-single-line = false
force-wrap-aliases = false

[lint.pydocstyle]
convention = "google"

[lint.per-file-ignores]
"**/migrations/*.py" = [
    "E501",  # Line length
    "D",     # Docstring rules
]
"*/tests/*.py" = [
    "D",     # Docstring rules
    "S",     # Bandit security warnings
]
"**/config/*.py" = [
    "F403",
    "F401",
    "F821",
    "F405"
]
"**/__init__.py" = [
    "F403",
    "F401",
    "F821"
]

[lint.mccabe]
max-complexity = 10